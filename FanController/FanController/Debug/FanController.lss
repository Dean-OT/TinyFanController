
FanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000558  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d6  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000126b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1e c0       	rjmp	.+60     	; 0x40 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	19 d0       	rcall	.+50     	; 0x6e <main>
  3c:	57 c0       	rjmp	.+174    	; 0xec <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_1>:

//Global Variables
volatile int i = 0;

ISR (INT0_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
	i++;
  4e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  52:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  56:	01 96       	adiw	r24, 0x01	; 1
  58:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  60:	9f 91       	pop	r25
  62:	8f 91       	pop	r24
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <main>:

int main(void)
{
	//Setting up the pins
    DDRB |= (1<<FanPWM);
  6e:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= (1<<FanTach) | (1<<FanPWM);
  70:	88 b3       	in	r24, 0x18	; 24
  72:	86 60       	ori	r24, 0x06	; 6
  74:	88 bb       	out	0x18, r24	; 24
	
	//INT0 interrupt enable
	MCUCR |= (1<<ISC01);
  76:	85 b7       	in	r24, 0x35	; 53
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0);
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8b bf       	out	0x3b, r24	; 59
	
	//8MHz/2/(OCR1C+1) = 25kHz when OCR1C = 159
	TCCR1 |= (1<<PWM1A) | (1<<COM1A1) | (1<<CS11);
  82:	80 b7       	in	r24, 0x30	; 48
  84:	82 66       	ori	r24, 0x62	; 98
  86:	80 bf       	out	0x30, r24	; 48
	GTCCR = 0x00;
  88:	1c bc       	out	0x2c, r1	; 44
	OCR1C = 159;
  8a:	8f e9       	ldi	r24, 0x9F	; 159
  8c:	8d bd       	out	0x2d, r24	; 45
	OCR1A = 159;
  8e:	8e bd       	out	0x2e, r24	; 46
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	83 e2       	ldi	r24, 0x23	; 35
  94:	94 ef       	ldi	r25, 0xF4	; 244
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x28>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x32>
  a0:	00 00       	nop
	_delay_ms(10000);
	
	sei();
  a2:	78 94       	sei
	
	while(1)
	{
		if (i<OCR1C+1)
  a4:	8d b5       	in	r24, 0x2d	; 45
  a6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  aa:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	28 17       	cp	r18, r24
  b4:	39 07       	cpc	r19, r25
  b6:	34 f4       	brge	.+12     	; 0xc4 <main+0x56>
		{
			OCR1A = i;
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c0:	8e bd       	out	0x2e, r24	; 46
  c2:	f0 cf       	rjmp	.-32     	; 0xa4 <main+0x36>
		}
		else if (i> OCR1C+1)
  c4:	8d b5       	in	r24, 0x2d	; 45
  c6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  ca:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	34 f7       	brge	.-52     	; 0xa4 <main+0x36>
		{
			i=0;
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			OCR1A = i;
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  e8:	8e bd       	out	0x2e, r24	; 46
  ea:	dc cf       	rjmp	.-72     	; 0xa4 <main+0x36>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
